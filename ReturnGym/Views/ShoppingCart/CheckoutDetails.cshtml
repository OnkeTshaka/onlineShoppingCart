@using ReturnGym.Models.OnlineShopping;
@model ReturnGym.Models.OnlineShopping.Order
@{
    ViewBag.Title = "CheckoutDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (Session["cart"] == null)
{
    <div class="alert alert-danger">
        <strong>No product added to cart!</strong>
    </div>

}
else
{
    <table class="table table-bordered" style="margin-top:20px;">
        <thead>
            <tr>
                <th></th>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Line Total</th>
                <th>Control</th>

            </tr>
        </thead>
        <tbody>
            @{
                int Total = 0;
            }
            @foreach (CartItem item in (List<CartItem>)Session["cart"])
            {
                int lineTotal = Convert.ToInt32(item.Quantity * item.Product.Price);
                Total = Convert.ToInt32(@Total + lineTotal);

                Session["SesTotal"] = Total;

                <tr>
                    <td>
                        <img src="data:image/png;base64,@Convert.ToBase64String(item.Product.Picture, 0, item.Product.Picture.Length)" class="img-responsive img-thumbnail" style="width: 80px; height: 80px;" alt="" />
                    </td>
                    <td>@item.Product.Name</td>
                    <td>@item.Product.Price</td>
                    <td>@item.Quantity</td>
                    <td>@lineTotal</td>
                    <td>
                        <a href="@Url.Action("AddToCart", "ShoppingCart", new { productId = item.Product.ProductID, url="CheckoutDetails" })">
                            <i class="glyphicon glyphicon-plus"></i>
                        </a>
                        <a href="@Url.Action("DecreaseQty", "ShoppingCart", new { productId = item.Product.ProductID, url="CheckoutDetails" })">
                            <i class="glyphicon glyphicon-minus"></i>
                        </a>
                        <a href="@Url.Action("RemoveFromCart", "ShoppingCart", new { productId = item.Product.ProductID, url="CheckoutDetails" })">
                            <i class="glyphicon glyphicon-remove"></i>
                        </a>
                    </td>
                </tr>
            }

            <tr>
                <td colspan="6" class="text-right"><b>Total: @Total</b></td>

            </tr>
        </tbody>
    </table>
    @*<a href="@Url.Action("PaymentWithPaypal", "ShoppingCart", new { id = Model.ProductID, price = Model.TotalCost, P_amount = Model.TotalCost, cid = Model.PlanID })" class="btn btn-success"><i class="fa fa-lock"></i>Payment >></a>*@

}
@using (Html.BeginForm(Html.BeginForm("ProcessOrder", "ShoppingCart", FormMethod.Post, new { id = "customer-form" })))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @*<h4>Customer Information</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
        <input type="text" name="cusName" />
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Refcode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" name="cusCode" />
                @Html.ValidationMessageFor(model => model.Refcode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
                @Html.LabelFor(model => model.CustomerPhone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="text" name="cusPhone" />
                    @Html.ValidationMessageFor(model => model.CustomerPhone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CustomerEmail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="text" name="cusEmail" />
                    @Html.ValidationMessageFor(model => model.CustomerEmail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CustomerAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="text" name="cusAddress" />
                    @Html.ValidationMessageFor(model => model.CustomerAddress, "", new { @class = "text-danger" })
                </div>
            </div>*@
        <div class="form-group">

            @if (Request.IsAuthenticated)
            {
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Order" class="btn btn-success" />
                </div>
            }
        </div>
    </div>
}

